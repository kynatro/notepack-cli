#!/bin/bash

SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done

# Real directory the file exists
DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"

# Path to script files
SCRIPTS_PATH="$DIR/../src"

# Filepath for active watch process monitoring
WATCHING_PATH="$HOME/.notepack_watching"

# Filepath for configuration
CONFIG_PATH="$HOME/.notepack_config"

# Notepack version
VERSION="$( cat "$DIR/../package.json" | grep -Eo '"version"[^,]*' | sed -n 's/^.*version\": \"\([^\"]*\).*$/\1/p' )"

backup () {
  node $SCRIPTS_PATH/gitBackup.js
}

configure () {
  node $SCRIPTS_PATH/configure.js
}

# Alternate to "wait" that allows waiting for processes that are not a child
# of the current shell. Only works on processes the user has permissions to
# terminate (which works well enough for our purposes).
detatched_wait () {
  while kill -0 $1 2> /dev/null; do sleep 0.1; done;
}

is_configured () {
  if [ -f $CONFIG_PATH ]
    then return 0
    else return 1
  fi
}

is_watching () {
  if [ -f $WATCHING_PATH ]
    then
      # Be sure process is actually running
      if [ -n "$(ps -p $(<$WATCHING_PATH) -o pid=)" ]
        then return 0
        else return 1
      fi
    else return 1
  fi
}

postinstall () {
  if is_configured
    then restart_watcher
    else
      configure
  fi
}

restart_watcher () {
  if is_watching
    then
      echo -e "\x1b[1;33mRestarting watcher...\x1b[0m"
      pid=$(< $WATCHING_PATH)
      kill $pid
      detatched_wait $pid
      start_watching
  fi
}

speak_configuration_status () {
  if is_configured
    then return 0
    else
      echo -e "Please configure your Notepack first by running \x1b[1;33m\x1b[1mnotepack configure\x1b[0m"
      return 1
  fi
}

speak_help () {
  echo -e "\x1b[34m\x1b[1mNotePack $VERSION\x1b[0m\n"
  echo -e "\x1b[32mUsage:\x1b[0m notepack <cmd> [args]\n"
  echo -e "\x1b[32mCommands:\x1b[0m"
  echo -e "  backup                   Commit individual note files to current git branch"
  echo -e "  configure                Configure NotePack"
  echo -e "  recent                   Display recently modified files"
  echo -e "  status                   Display the status of the watcher"
  echo -e "  stop                     Stop watching for file changes"
  echo -e "  todos                    Display all open todos"
  echo -e "  todos mine               Display open todos assigned to the project owner"
  echo -e "  todos [team_member]      Display open todos assigned to a team member"
  echo -e "  update                   Update all README.md files (folders and team)"
  echo -e "  watch                    Watch file changes in the background"
  echo -e "\n\x1b[32mOptions:\x1b[0m"
  echo -e "  --help                   Show this help (alias: h)"
  echo -e "  --version                Show version number (alias: v)"
  echo -e "\n\x1b[34mFind out more about NotePack on GitHub at:\x1b[0m"
  echo -e "https://github.com/kynatro/notepack-cli"
}

speak_recent_files () {
  node $SCRIPTS_PATH/recentFiles.js
}

speak_todos () {
  if [ $1 ]
    then
      node $SCRIPTS_PATH/todos.js --asignedTo $1
    else
      node $SCRIPTS_PATH/todos.js
  fi
}

speak_version () {
  echo $VERSION
}

speak_watching_status () {
  if is_watching
    then
      echo -e "\x1b[0;34mWatching notes in the background (pid: $(< $WATCHING_PATH))\x1b[0m"
    else
      echo -e "Not watching notes. Run \x1b[1;33m\x1b[1mnotepack watch\x1b[0m to start watching."
  fi
}

start_watching () {
  node $SCRIPTS_PATH/watch.js --background > /dev/null &
  disown
  echo -n $! >> $WATCHING_PATH
  echo -e "\x1b[0;34mWatching notes in the background (pid: $!)...\x1b[0m"
}

stop_watching () {
  if is_watching
    then
      echo -e "\x1b[0;34mNo longer watching notes in the background\x1b[0m"
      kill $(< $WATCHING_PATH)
    else
      echo -e "Not watching notes in the background"
  fi
}

update_recent_files () {
  node $SCRIPTS_PATH/updateRecentFiles.js
}

update_todos () {
  node $SCRIPTS_PATH/updateTodos.js
}

watch () {
  if is_watching
    then
      if ps -p $(< $WATCHING_PATH) > /dev/null
        then
          echo -e "\x1b[0;31mAlready watching (pid: $(< $WATCHING_PATH))...\x1b[0m"
        else
          rm $WATCHING_PATH
          start_watching
      fi
    else
      start_watching
  fi
}

case "$1" in
"backup")
  backup
  ;;
"configure")
  configure
  ;;
"postinstall")
  postinstall
  ;;
"recent")
  speak_recent_files
  ;;
"status")
  speak_watching_status
  ;;
"stop")
  speak_configuration_status && stop_watching
  ;;
"todos")
  speak_configuration_status && speak_todos $2
  ;;
"update")
  speak_configuration_status && update_todos && update_recent_files
  ;;
"watch")
  speak_configuration_status && watch
  ;;
"--help" | "-h")
  speak_help
  ;;
"--version" | "-v")
  speak_version
  ;;
*)
  echo -e "\x1b[0;31m$@ is not a valid argument!\n\x1b[0m"
  speak_help
  ;;
esac
